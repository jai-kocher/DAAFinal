// KNAPSACK DYNAMIC
#include <iostream>
#include <vector>
using namespace std;

int knapSackRec(int W, vector<int> wt, vector<int> val, int i, vector<vector<int>>& dp)
{
	if (i < 0)
		return 0;
	if (dp[i][W] != -1)
		return dp[i][W];

	if (wt[i] > W) {
		dp[i][W] = knapSackRec(W, wt, val, i - 1, dp);
		return dp[i][W];
	}
	else {
		dp[i][W] = max(val[i] + knapSackRec(W - wt[i], wt, val, i - 1, dp), knapSackRec(W, wt, val, i - 1, dp));
		return dp[i][W];
	}
}

int knapSack(int W, vector<int> wt, vector<int> val, int n)
{
    vector<vector<int>> dp(n, vector<int>(W + 1, -1));
	int ret = knapSackRec(W, wt, val, n - 1, dp);
    cout << dp << endl;
    return ret;
}

int main()
{
	vector<int> val = { 60, 100, 120 };
	vector<int> wt = { 10, 20, 30 };
	int W = 50;
	int n = sizeof(val) / sizeof(val[0]);
	cout << knapSack(W, wt, val, n) << endl;
	return 0;
}

//KNAPSACK BRANCH AND BOUND
#include <iostream>
#include <queue>
using namespace std;

struct Item
{
	float weight;
	int value;
};

struct Node
{
	int level, profit, bound;
	float weight;
};

bool cmp(Item a, Item b)
{
	double r1 = (double)a.value / a.weight;
	double r2 = (double)b.value / b.weight;
	return r1 > r2;
}

int bound(Node u, int n, int W, Item arr[])
{

	if (u.weight >= W)
		return 0;

	int profit_bound = u.profit;

	int j = u.level + 1;
	int totweight = u.weight;

	while ((j < n) && (totweight + arr[j].weight <= W))
	{
		totweight += arr[j].weight;
		profit_bound += arr[j].value;
		j++;
	}

	if (j < n)
		profit_bound += (W - totweight) * arr[j].value /
										arr[j].weight;

	return profit_bound;
}

int knapsack(int W, Item arr[], int n)
{
	sort(arr, arr + n, cmp);

	queue<Node> Q;
	Node u, v;

	u.level = -1;
	u.profit = u.weight = 0;
	Q.push(u);

	int maxProfit = 0;
	while (!Q.empty())
	{
		u = Q.front();
		Q.pop();

		if (u.level == -1)
			v.level = 0;

		if (u.level == n-1)
			continue;

		v.level = u.level + 1;

		v.weight = u.weight + arr[v.level].weight;
		v.profit = u.profit + arr[v.level].value;

		if (v.weight <= W && v.profit > maxProfit)
			maxProfit = v.profit;

		v.bound = bound(v, n, W, arr);

		if (v.bound > maxProfit)
			Q.push(v);

		v.weight = u.weight;
		v.profit = u.profit;
		v.bound = bound(v, n, W, arr);
		if (v.bound > maxProfit)
			Q.push(v);
	}

	return maxProfit;
}

int main()
{
	int W = 10; // Weight of knapsack
	Item arr[] = {{2, 40}, {3.14, 50}, {1.98, 100},
				{5, 95}, {3, 30}};
	int n = sizeof(arr) / sizeof(arr[0]);

	cout << "Maximum possible profit = "
		<< knapsack(W, arr, n);

	return 0;
}

//TSP BRUTE
#include <iostream>
#include <vector>
using namespace std;

template <typename S>
ostream& operator <<(ostream& out, vector<S> arr) {
    for(auto i: arr) {
        out << i << " ";
    }
    out << endl;
    return out;
}

int travellingSalesmanProblem(vector<vector<int>> graph, int s)
{
	vector<int> vertices;
	for (int i = 0; i < 4; i++) {
        if (i != s) {
            vertices.push_back(i);
        }
    }

	int min_path = INT_MAX;
	do {
		int current_pathweight = 0;
		int k = s;
		for (int i = 0; i < vertices.size(); i++) {
			current_pathweight += graph[k][vertices[i]];
            cout << k << " " << vertices[i] << endl;
			k = vertices[i];
		}
		current_pathweight += graph[k][s];
		min_path = min(min_path, current_pathweight);

	} while(next_permutation(vertices.begin(), vertices.end()));

	return min_path;
}

int main()
{

	vector<vector<int>> graph = {{0, 10, 15, 20},
					             {10, 0, 35, 25},
					             {15, 35, 0, 30},
					             {20, 25, 30, 0}};

	int s = 0;
	cout << travellingSalesmanProblem(graph, s) << endl;
	return 0;
}

//TSP BB
#include <iostream>
#include <climits>
using namespace std;
const int N = 4;

int final_path[N+1];


bool visited[N];

int final_res = INT_MAX;

void copyToFinal(int curr_path[])
{
	for (int i=0; i<N; i++)
		final_path[i] = curr_path[i];
	final_path[N] = curr_path[0];
}

int firstMin(int adj[N][N], int i)
{
	int min = INT_MAX;
	for (int k=0; k<N; k++)
		if (adj[i][k]<min && i != k)
			min = adj[i][k];
	return min;
}

int secondMin(int adj[N][N], int i)
{
	int first = INT_MAX, second = INT_MAX;
	for (int j=0; j<N; j++)
	{
		if (i == j)
			continue;

		if (adj[i][j] <= first)
		{
			second = first;
			first = adj[i][j];
		}
		else if (adj[i][j] <= second &&
				adj[i][j] != first)
			second = adj[i][j];
	}
	return second;
}

void TSPRec(int adj[N][N], int curr_bound, int curr_weight,
			int level, int curr_path[])
{
	if (level==N)
	{
		if (adj[curr_path[level-1]][curr_path[0]] != 0)
		{
			int curr_res = curr_weight +
					adj[curr_path[level-1]][curr_path[0]];
			if (curr_res < final_res)
			{
				copyToFinal(curr_path);
				final_res = curr_res;
			}
		}
		return;
	}

	for (int i=0; i<N; i++)
	{
		if (adj[curr_path[level-1]][i] != 0 &&
			visited[i] == false)
		{
			int temp = curr_bound;
			curr_weight += adj[curr_path[level-1]][i];
			if (level==1)
			curr_bound -= ((firstMin(adj, curr_path[level-1]) +
							firstMin(adj, i))/2);
			else
			curr_bound -= ((secondMin(adj, curr_path[level-1]) +
							firstMin(adj, i))/2);

			if (curr_bound + curr_weight < final_res)
			{
				curr_path[level] = i;
				visited[i] = true;

				TSPRec(adj, curr_bound, curr_weight, level+1,
					curr_path);
			}
			curr_weight -= adj[curr_path[level-1]][i];
			curr_bound = temp;

			memset(visited, false, sizeof(visited));
			for (int j=0; j<=level-1; j++)
				visited[curr_path[j]] = true;
		}
	}
}

void TSP(int adj[N][N])
{
	int curr_path[N+1];

	int curr_bound = 0;
	memset(curr_path, -1, sizeof(curr_path));
	memset(visited, 0, sizeof(curr_path));

	for (int i=0; i<N; i++)
		curr_bound += (firstMin(adj, i) +
					secondMin(adj, i));

	curr_bound = (curr_bound&1)? curr_bound/2 + 1 :
								curr_bound/2;

	visited[0] = true;
	curr_path[0] = 0;

	TSPRec(adj, curr_bound, 0, 1, curr_path);
}

int main()
{
	int adj[N][N] = { {0, 10, 15, 20},
		{10, 0, 35, 25},
		{15, 35, 0, 30},
		{20, 25, 30, 0}
	};

	TSP(adj);

	printf("Minimum cost : %d\n", final_res);
	printf("Path Taken : ");
	for (int i=0; i<=N; i++)
		printf("%d ", final_path[i]);

	return 0;
}

//TSP DYNAMIC
#include <iostream>

using namespace std;

const int n = 4;

const int MAX = 1000000;

int dist[n + 1][n + 1] = {
	{ 0, 0, 0, 0, 0 }, { 0, 0, 10, 15, 20 },
	{ 0, 10, 0, 25, 25 }, { 0, 15, 25, 0, 30 },
	{ 0, 20, 25, 30, 0 },
};

int memo[n + 1][1 << (n + 1)];

int fun(int i, int mask)
{

	if (mask == ((1 << i) | 3))
		return dist[1][i];

	if (memo[i][mask] != 0)
		return memo[i][mask];

	int res = MAX;

	for (int j = 1; j <= n; j++)
		if ((mask & (1 << j)) && j != i && j != 1)
			res = std::min(res, fun(j, mask & (~(1 << i)))
									+ dist[j][i]);
	return memo[i][mask] = res;
}

int main()
{
	int ans = MAX;
	for (int i = 1; i <= n; i++)
		ans = std::min(ans, fun(i, (1 << (n + 1)) - 1)
								+ dist[i][1]);

	printf("The cost of most efficient tour = %d", ans);

	return 0;
}

//TSP BACKTRACKING
#include <iostream>
#include <vector>
using namespace std;
#define V 4

void tsp(int graph[][V], vector<bool>& v, int currPos,
		int n, int count, int cost, int& ans)
{

	if (count == n && graph[currPos][0]) {
		ans = min(ans, cost + graph[currPos][0]);
		return;
	}

	for (int i = 0; i < n; i++) {
		if (!v[i] && graph[currPos][i]) {

			v[i] = true;
			tsp(graph, v, i, n, count + 1,
				cost + graph[currPos][i], ans);

			v[i] = false;
		}
	}
};

int main()
{

	int n = 4;

	int graph[][V] = {
		{ 0, 10, 15, 20 },
		{ 10, 0, 35, 25 },
		{ 15, 35, 0, 30 },
		{ 20, 25, 30, 0 }
	};
	vector<bool> v(n);
	for (int i = 0; i < n; i++)
		v[i] = false;

	v[0] = true;
	int ans = INT_MAX;

	tsp(graph, v, 0, n, 1, 0, ans);
	cout << ans;

	return 0;
}

//ASSIGNMENT BB
#include <iostream>
#include <queue>
using namespace std;
#define N 4

struct Node
{
	Node* parent;

	int pathCost;

	int cost;

	int workerID;
	int jobID;
	bool assigned[N];
};

Node* newNode(int x, int y, bool assigned[],
			Node* parent)
{
	Node* node = new Node;

	for (int j = 0; j < N; j++)
		node->assigned[j] = assigned[j];
	node->assigned[y] = true;

	node->parent = parent;
	node->workerID = x;
	node->jobID = y;

	return node;
}

int calculateCost(int costMatrix[N][N], int x,
				int y, bool assigned[])
{
	int cost = 0;

	bool available[N] = {true};


	for (int i = x + 1; i < N; i++)
	{
		int min = INT_MAX, minIndex = -1;

		for (int j = 0; j < N; j++)
		{

			if (!assigned[j] && available[j] &&
				costMatrix[i][j] < min)
			{
				minIndex = j;

				
				min = costMatrix[i][j];
			}
		}

		
		cost += min;

		
		available[minIndex] = false;
	}

	return cost;
}


struct comp
{
	bool operator()(const Node* lhs,
				const Node* rhs) const
	{
		return lhs->cost > rhs->cost;
	}
};


void printAssignments(Node *min)
{
	if(min->parent==NULL)
		return;

	printAssignments(min->parent);
	cout << "Assign Worker " << char(min->workerID + 'A')
		<< " to Job " << min->jobID << endl;

}


int findMinCost(int costMatrix[N][N])
{
	priority_queue<Node*, std::vector<Node*>, comp> pq;

	bool assigned[N] = {false};
	Node* root = newNode(-1, -1, assigned, NULL);
	root->pathCost = root->cost = 0;
	root->workerID = -1;

	pq.push(root);
	while (!pq.empty())
	{
	Node* min = pq.top();

	pq.pop();

	int i = min->workerID + 1;

	if (i == N)
	{
		printAssignments(min);
		return min->cost;
	}

	for (int j = 0; j < N; j++)
	{

		if (!min->assigned[j])
		{
		Node* child = newNode(i, j, min->assigned, min);

		child->pathCost = min->pathCost + costMatrix[i][j];

		child->cost = child->pathCost +
			calculateCost(costMatrix, i, j, child->assigned);

		pq.push(child);
		}
	}
	}
}

int main()
{
	int costMatrix[N][N] =
	{
		{9, 2, 7, 8},
		{6, 4, 3, 7},
		{5, 8, 1, 8},
		{7, 6, 9, 4}
	};



	cout << "\nOptimal Cost is "
		<< findMinCost(costMatrix);

	return 0;
}
